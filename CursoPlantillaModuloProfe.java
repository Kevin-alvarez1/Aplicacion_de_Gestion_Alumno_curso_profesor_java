/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ipc1_2s2023_proyecto1_202203038;

import static ipc1_2s2023_proyecto1_202203038.LoginProfesores.vectorParaCrearBotones;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Player
 */
public class CursoPlantillaModuloProfe extends javax.swing.JFrame {
    /**
     * Creates new form CursoPlantillaModuloProfe
     */
    JFileChooser seleccionarAlumno2 = new JFileChooser();
    File CargaAlumno2;
    JFileChooser seleccionarNotas = new JFileChooser();
    File CargaNotas;
     public static Vector<Vector<String>> vectorAlumnosAsignadosAsignados = new Vector<>();
     public static Vector<Vector<String>> notasCurso = new Vector<>();

    public CursoPlantillaModuloProfe() {
        initComponents();
       // Crear el renderer personalizado
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (column == 3) { // Columna 4 (0-based) donde deseas mostrar "Ver más información"
                    value = "Ver más información"; // Cambia el valor de la celda en esa columna
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        };
   // Agregar el código para manejar el clic en la tabla
        TablaListadoAlumnos.addMouseListener(new MouseAdapter() {
            @Override
public void mouseClicked(MouseEvent e) {
    int filaSeleccionada = TablaListadoAlumnos.getSelectedRow();
    int columnaSeleccionada = TablaListadoAlumnos.getSelectedColumn();

    String codigoEstudiante = null; // Declarar la variable aquí

    if (filaSeleccionada != -1 && columnaSeleccionada == 3) { // Verificar si se hizo clic en la columna 4
        // Obtener el código del estudiante desde la tabla (asumiendo que la columna 0 contiene el código)
     codigoEstudiante = (String) TablaListadoAlumnos.getValueAt(filaSeleccionada, 0);

    // Crear una instancia del JFrame AlumnoDesasignarFrame y pasar el código del estudiante
    AlumnoDesasignarFrame alumnoDesasignarFrame = new AlumnoDesasignarFrame(codigoEstudiante);
    alumnoDesasignarFrame.setVisible(true);
    }

}

        });
        // Aplicar el renderer personalizado a la columna 3 (0-based)
        TablaListadoAlumnos.getColumnModel().getColumn(3).setCellRenderer(renderer);
    
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
    }
        private String nombreCurso;
        
 public void llenarPlantilla(String nombreCurso, String descripcionCurso) {
        LabelNombreCurso.setText(nombreCurso);
        this.nombreCurso = nombreCurso;    
 }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LabelNombreCurso = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaListadoAlumnos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaActidades = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        AcumuladoLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        NombreActividadtxtField = new javax.swing.JTextField();
        DescripcionActividadtxtField = new javax.swing.JTextField();
        PonderacionActividadtxtField = new javax.swing.JTextField();
        CargacsvNotas = new javax.swing.JButton();
        CrearActividadBoton = new javax.swing.JButton();
        Top5MejoresEstudiantesboton = new javax.swing.JButton();
        Top5PeoresEstudiantesboton = new javax.swing.JButton();
        CargaMasivaAlumnosAsignados = new javax.swing.JButton();
        regresarboton = new javax.swing.JButton();
        actualizarTablaBoton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        actualizarTablaActividadesBoton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        LabelNombreCurso.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelNombreCurso.setForeground(new java.awt.Color(0, 0, 0));
        LabelNombreCurso.setText("Curso");

        TablaListadoAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre", "Apellido", "Acciones"
            }
        ));
        jScrollPane1.setViewportView(TablaListadoAlumnos);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Listado Alumnos");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Actividades");

        TablaActidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Descripcion", "Ponderacion", "Promedio"
            }
        ));
        jScrollPane2.setViewportView(TablaActidades);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Acumulado: ");

        AcumuladoLabel.setForeground(new java.awt.Color(0, 0, 0));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Crear Actividad");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Nombre");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Reportes");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Descripcion");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Notas");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Ponderacion");

        CargacsvNotas.setText("Seleccionar archivo csv");
        CargacsvNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargacsvNotasActionPerformed(evt);
            }
        });

        CrearActividadBoton.setText("Crear Actividad");
        CrearActividadBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearActividadBotonActionPerformed(evt);
            }
        });

        Top5MejoresEstudiantesboton.setText("Top 5 - Estudiantes con mejor rendimiento");
        Top5MejoresEstudiantesboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top5MejoresEstudiantesbotonActionPerformed(evt);
            }
        });

        Top5PeoresEstudiantesboton.setText("Top 5 - Estudiantes con peor rendimiento");
        Top5PeoresEstudiantesboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Top5PeoresEstudiantesbotonActionPerformed(evt);
            }
        });

        CargaMasivaAlumnosAsignados.setText("Carga masiva alumnos");
        CargaMasivaAlumnosAsignados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargaMasivaAlumnosAsignadosActionPerformed(evt);
            }
        });

        regresarboton.setText("Regresar");
        regresarboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarbotonActionPerformed(evt);
            }
        });

        actualizarTablaBoton.setText("Actualizar tabla");
        actualizarTablaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarTablaBotonActionPerformed(evt);
            }
        });

        jButton1.setText("Limpiar tabla");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        actualizarTablaActividadesBoton.setText("Actualizar tabla");
        actualizarTablaActividadesBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarTablaActividadesBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LabelNombreCurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresarboton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(Top5MejoresEstudiantesboton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Top5PeoresEstudiantesboton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CargaMasivaAlumnosAsignados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(actualizarTablaBoton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11)
                                        .addComponent(jLabel10))
                                    .addGap(17, 17, 17)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(PonderacionActividadtxtField)
                                        .addComponent(CargacsvNotas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel7))
                                    .addGap(24, 24, 24)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(DescripcionActividadtxtField)
                                        .addComponent(NombreActividadtxtField))))
                            .addComponent(CrearActividadBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AcumuladoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(actualizarTablaActividadesBoton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNombreCurso)
                    .addComponent(regresarboton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(AcumuladoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(actualizarTablaActividadesBoton))
                        .addGap(8, 8, 8)
                        .addComponent(jLabel6)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(NombreActividadtxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(DescripcionActividadtxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CargaMasivaAlumnosAsignados))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(PonderacionActividadtxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(actualizarTablaBoton)
                            .addComponent(jButton1))
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8)
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(CargacsvNotas)
                    .addComponent(Top5MejoresEstudiantesboton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Top5PeoresEstudiantesboton, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(CrearActividadBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regresarbotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarbotonActionPerformed
        // TODO add your handling code here:
         for (Vector<String> elemento : vectorAlumnosAsignadosAsignados) {
            for (String valor : elemento) {
                System.out.print(valor + " "); // Mostrar cada valor separado por un espacio
            }
            System.out.println(); // Nueva línea para separar cada elemento del vector
        }
    this.dispose();
    
    }//GEN-LAST:event_regresarbotonActionPerformed
private void cargarDatosDesdeCSVAlumnos2(File archivoCSV) {
    DefaultTableModel modelo = (DefaultTableModel) TablaListadoAlumnos.getModel();
    modelo.setRowCount(0); // Limpiamos todas las filas existentes en la tabla

    try (BufferedReader br = new BufferedReader(new FileReader(archivoCSV))) {
        String line;
        int numeroDeCarga = 1; // Variable para llevar la cuenta del número de carga

        while ((line = br.readLine()) != null) {
            String[] datos = line.split(",");
            if (datos.length == 5) {
                modelo.addRow(datos); // Agregamos una fila al modelo de tabla
                String nombreCurso = "nombreCurso"; // Reemplaza con el nombre del curso adecuado
                String descripcionCurso = "descripcionCurso"; // Reemplaza con la descripción del curso adecuada
                CursoPlantillaModuloProfe plantilla = new CursoPlantillaModuloProfe();
                llenarPlantilla( nombreCurso,  descripcionCurso);
                numeroDeCarga++; // Incrementar el número de carga para la próxima fila
            }
        }
        JOptionPane.showMessageDialog(this, "Datos cargados exitosamente.");
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error al leer el archivo CSV.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

 public String AbrirCargaAlumnos(File CargaAlumno){
Vector<Vector<String>> vectorAlumnosAsignados = CursoPlantillaModuloProfe.vectorAlumnosAsignadosAsignados;
       String documento3 = "";
    try {
        BufferedReader br = new BufferedReader(new FileReader(CargaAlumno));
        String linea;
        
        while ((linea = br.readLine()) != null) {
            String[] campos = linea.split(",");
            
            // Convierte los campos en un vector de cadenas
            Vector<String> fila = new Vector<>();
            for (String campo : campos) {
                fila.add(campo);
            }
            
            // Agrega la fila al vectorDeDatos
            vectorAlumnosAsignadosAsignados.add(fila);
        }

        br.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return documento3;
        }
    private void CargaMasivaAlumnosAsignadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargaMasivaAlumnosAsignadosActionPerformed
        // TODO add your handling code here:
Vector<Vector<String>> vectorAlumnosAsignados = CursoPlantillaModuloProfe.vectorAlumnosAsignadosAsignados;

        if(seleccionarAlumno2.showDialog(null,"Abrir")==JFileChooser.APPROVE_OPTION){
           CargaAlumno2=seleccionarAlumno2.getSelectedFile();
           if(CargaAlumno2.canRead()){
               if(CargaAlumno2.getName().endsWith("csv")){
                   String documento4 = AbrirCargaAlumnos(CargaAlumno2);
                    cargarDatosDesdeCSVAlumnos2(CargaAlumno2); // Llamamos a un método para cargar los datos
                    llenarTablaAlumnosAsignados();

               } else{
                JOptionPane.showMessageDialog(null, "Archivo no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
               }
           }
        }
        
      
    }//GEN-LAST:event_CargaMasivaAlumnosAsignadosActionPerformed

private void llenarTablaAlumnosAsignados() {
    // Obtener el vector de datos desde CrearProfe
    Vector<Vector<String>> vectorAlumnosAsignados = CursoPlantillaModuloProfe.vectorAlumnosAsignadosAsignados;
    Vector<Vector<String>> vectorAlumnos = ModuloAdmin.vectorAlumnos;

    // Obtener el modelo de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) TablaListadoAlumnos.getModel();

    // Limpia la tabla antes de agregar datos nuevos
    modeloTabla.setRowCount(0);

    // Recorrer el vector de alumnos asignados
    for (Vector<String> filaAlumnosAsignados : vectorAlumnosAsignados) {
        // Verificar si la fila tiene al menos 1 elemento
        if (!filaAlumnosAsignados.isEmpty()) {
            String nombreAlumnoAsignado = filaAlumnosAsignados.get(0);

            // Recorrer el vector de alumnos
            for (Vector<String> filaAlumnos : vectorAlumnos) {
                String nombreAlumno = filaAlumnos.get(0);

                // Comparar los nombres
                if (nombreAlumnoAsignado.equals(nombreAlumno)) {
                    // Actualizar los datos en vectorAlumnosAsignadosAsignados
                    if (filaAlumnos.size() >= 3) {
                        if (filaAlumnosAsignados.size() < 3) {
                            // Si el vectorAlumnosAsignados no tiene datos en las posiciones 1 y 2, agrégalos
                            while (filaAlumnosAsignados.size() < 3) {
                                filaAlumnosAsignados.add("");
                            }
                        }
                        filaAlumnosAsignados.set(1, filaAlumnos.get(1)); // Actualiza la posición 1
                        filaAlumnosAsignados.set(2, filaAlumnos.get(2)); // Actualiza la posición 2
                    }
                    break; // Deja de buscar en el vector de alumnos una vez que se encuentre una coincidencia
                }
            }
        }
    }
    agregarNombreCurso(vectorAlumnosAsignados, nombreCurso);
    obtenerAlumnosPorNombreCurso(vectorAlumnosAsignados, nombreCurso);
    
    
}

private void agregarNombreCurso(Vector<Vector<String>> vectorAlumnosAsignadosAsignados, String nombreCurso) {
    // Recorrer todas las filas en el vector
    for (Vector<String> fila : vectorAlumnosAsignadosAsignados) {
        // Verificar si la fila tiene al menos 4 elementos (posición 4 existe)
        if (fila.size() >= 4) {
            // Obtener el valor en la cuarta posición (posición 3 en términos de índice)
            String valorEnPosicion4 = fila.get(4);

            // Verificar si la cuarta posición está vacía antes de agregar nombreCurso
            if (valorEnPosicion4.isEmpty()) {
                // Agregar nombreCurso en la cuarta posición
                fila.set(4, nombreCurso);
            }
        } else {
            // Si la fila no tiene al menos 4 elementos, agregar elementos vacíos hasta llegar a la cuarta posición
            while (fila.size() <= 4) {
                fila.add("");
            }
            // Agregar nombreCurso en la cuarta posición
            fila.set(4, nombreCurso);
        }
    }
    
}


private Vector<String> obtenerAlumnosPorNombreCurso(Vector<Vector<String>> vectorAlumnosAsignados, String nombreCurso) {
    // Crear un nuevo vector para almacenar los nombres de los alumnos
    Vector<String> alumnosEnCurso = new Vector<>();

    // Obtener el modelo de la tabla
    DefaultTableModel modeloTabla = (DefaultTableModel) TablaListadoAlumnos.getModel();

    // Limpia la tabla antes de agregar datos nuevos
    modeloTabla.setRowCount(0);

    // Recorrer el vector de alumnos asignados
    for (Vector<String> filaAlumnosAsignados : vectorAlumnosAsignados) {
        // Verificar si la fila tiene al menos 4 elementos (posición 3 existe)
        if (filaAlumnosAsignados.size() >= 4) {
            // Obtener el valor en la cuarta posición (posición 3 en términos de índice)
            String valorEnPosicion3 = filaAlumnosAsignados.get(4);

            // Comparar si el valor en la cuarta posición coincide con nombreCurso
            if (valorEnPosicion3.equals(nombreCurso)) {
                // Agregar la fila a la tabla
                modeloTabla.addRow(filaAlumnosAsignados.toArray());

                // Agregar el nombre del alumno (posición 0) al vector
                String nombreAlumno = filaAlumnosAsignados.get(0);
                alumnosEnCurso.add(nombreAlumno);
            }
        }
    }
    agregarNombreCursoVector(vectorAlumnosAsignados,nombreCurso);

    return alumnosEnCurso;
 
}

public static Vector<Vector<String>> alumnosEnCurso = new Vector<>();

public static Vector<Vector<String>> actividadesCurso = new Vector<>();

private void llenarTablaActividades(String nombreCurso) {
    // Obtener el modelo de la tabla
    calcularPromedio(vectorAlumnosAsignadosAsignados, notasCurso);

    DefaultTableModel modeloTabla = (DefaultTableModel) TablaActidades.getModel();

    // Limpia la tabla antes de agregar datos nuevos
    modeloTabla.setRowCount(0);

    int totalPonderacion = 0; // Inicializa el total de ponderación en 0

    // Iterar a través del vector de actividades del curso
    for (Vector<String> actividad : actividadesCurso) {
        // Verificar si el vector tiene al menos 4 elementos (posiciones 0, 1, 2 y 3)
        if (actividad.size() >= 4) {
            // Obtener el nombre del curso de la posición 0
            String nombreCursoActividad = actividad.get(0);

            // Si el nombre del curso coincide con el nombreCurso proporcionado
            if (nombreCursoActividad.equals(nombreCurso)) {
                // Obtener los datos de las posiciones 1, 2 y 3
                String columna1 = actividad.get(1);
                String columna2 = actividad.get(2);
                String columna3 = actividad.get(3);

                // Agregar una fila a la tabla con los datos obtenidos
                modeloTabla.addRow(new Object[] { columna1, columna2, columna3 });

                // Calcular la ponderación y sumarla al total
                int ponderacion = Integer.parseInt(actividad.get(3));
                totalPonderacion += ponderacion;
            }
        }
    }

    // Actualizar el JLabel con la ponderación acumulada
    AcumuladoLabel.setText(totalPonderacion + " / 100");

    // Establecer el valor de promedioParaTabla en la columna 4
    modeloTabla.setValueAt(promedioParaTabla, 0, 3);
}
public double promedioParaTabla; // Variable pública para almacenar el promedio

public void calcularPromedio(Vector<Vector<String>> vectorAlumnosAsignadosAsignados, Vector<Vector<String>> notasCurso) {
    int numCoincidencias = 0;
    double sumaPromedios = 0.0;

    // Iterar a través de todas las posiciones 0 de vectorAlumnosAsignadosAsignados
    for (Vector<String> filaAlumnos : vectorAlumnosAsignadosAsignados) {
        if (!filaAlumnos.isEmpty() && filaAlumnos.size() > 0) {
            String codigoCursoAlumnos = filaAlumnos.get(0);

            // Iterar a través del vector notasCurso para buscar coincidencias
            for (Vector<String> filaNotas : notasCurso) {
                if (!filaNotas.isEmpty() && filaNotas.size() > 0 && filaNotas.get(0).equals(codigoCursoAlumnos)) {
                    // Verificar si hay un valor en la posición 1 y si es un número válido
                    if (filaNotas.size() > 1) {
                        try {
                            double valor = Double.parseDouble(filaNotas.get(1));
                            sumaPromedios += valor;
                            numCoincidencias++;
                        } catch (NumberFormatException e) {
                            // Manejo de error si el valor no es un número válido
                            System.err.println("Error al analizar un valor en notasCurso: " + e.getMessage());
                        }
                    }
                }
            }
        }
    }

    // Calcular el promedio si hubo al menos una coincidencia
    if (numCoincidencias > 0) {
        promedioParaTabla = sumaPromedios / numCoincidencias;
    }
}

private void agregarNombreCursoVector(Vector<Vector<String>> vectorAlumnosAsignados, String nombreCurso) {
    // Recorrer el vector de alumnos asignados
    for (Vector<String> filaAlumnosAsignados : vectorAlumnosAsignados) {
        // Verificar si la fila tiene al menos 3 elementos (posiciones 0, 1 y 2 existen)
        if (filaAlumnosAsignados.size() >= 3) {
            // Crear un nuevo vector para almacenar los datos del alumno en curso
            Vector<String> alumnoEnCurso = new Vector<>();

            alumnoEnCurso.add(filaAlumnosAsignados.get(0));

            // Verificar si la posición 1 de alumnoEnCurso está vacía
            if (alumnoEnCurso.size() <= 1 || alumnoEnCurso.get(1).isEmpty()) {
                // Agregar nombreCursoConfirmado en la próxima posición disponible
                int posicion = 1;
                while (posicion < alumnoEnCurso.size() && !alumnoEnCurso.get(posicion).isEmpty()) {
                    posicion++;
                }
                // Verificar si la posición es igual al tamaño, lo que significa que no hay datos en la posición 1
                if (posicion == alumnoEnCurso.size()) {
                    alumnoEnCurso.add(nombreCurso);
                } else {
                    // Agregar nombreCursoConfirmado en la siguiente posición disponible
                    alumnoEnCurso.add(posicion, nombreCurso);
                }
            } else {
                // Obtener el nombre del curso actual en la posición 1 y agregar nombreCurso después de él
                String cursoActual = alumnoEnCurso.get(1);
                alumnoEnCurso.add(2, nombreCurso);
            }

            alumnosEnCurso.add(alumnoEnCurso);
        }
    }

  
}

    private void actualizarTablaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarTablaBotonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modeloTabla = (DefaultTableModel) TablaListadoAlumnos.getModel();
        modeloTabla.setRowCount(0);     
        llenarTablaAlumnosAsignados();

    }//GEN-LAST:event_actualizarTablaBotonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
      DefaultTableModel model = (DefaultTableModel) TablaListadoAlumnos.getModel();
        model.setRowCount(0);  
    }//GEN-LAST:event_jButton1ActionPerformed

private void agregarActividadAlVector(String nombreCurso) {
    // Verificar si ya existen actividades para este curso
    
    String nombreActividad = NombreActividadtxtField.getText();
    String descripcionActividad = DescripcionActividadtxtField.getText();
    String ponderacionActividad = PonderacionActividadtxtField.getText();

    if (validarPonderacion(nombreCurso,ponderacionActividad)) {
        Vector<String> actividad = new Vector<>();
        actividad.add(nombreCurso);
        actividad.add(nombreActividad);
        actividad.add(descripcionActividad);
        actividad.add(ponderacionActividad);

        actividadesCurso.add(actividad);
        llenarTablaActividades(nombreCurso);
    }
}
public  int totalPonderacion;
public int ponderacion;
private boolean validarPonderacion(String nombreCurso, String ponderacionActividad) {
     totalPonderacion = 0;
    boolean cursoEncontrado = false;

    for (Vector<String> actividad : actividadesCurso) {
        if (actividad.get(0).equals(nombreCurso)) {
            cursoEncontrado = true;
            try {
                int ponderacion = Integer.parseInt(actividad.get(3));
                totalPonderacion += ponderacion;
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "La ponderación de una actividad no es un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
    }

    if (!cursoEncontrado) {
        totalPonderacion = 0;
    }

    try {
         ponderacion = Integer.parseInt(ponderacionActividad);

        if (ponderacion > 100) {
            JOptionPane.showMessageDialog(this, "La ponderación de una actividad no puede ser mayor a 100.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (totalPonderacion + ponderacion > 100) {
            JOptionPane.showMessageDialog(this, "La suma de ponderaciones no puede ser mayor a 100.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "La ponderación debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

   

    return true;
}
    private void CrearActividadBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearActividadBotonActionPerformed
        // TODO add your handling code here:
        agregarActividadAlVector(nombreCurso);
        // Mostrar el contenido del vector alumnosEnCurso
    
        for (Vector<String> elemento : actividadesCurso) {
            for (String valor : elemento) {
                System.out.print(valor + " "); // Mostrar cada valor separado por un espacio
            }
            System.out.println(); // Nueva línea para separar cada elemento del vector
        } 
    }//GEN-LAST:event_CrearActividadBotonActionPerformed

    private void actualizarTablaActividadesBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarTablaActividadesBotonActionPerformed
        // TODO add your handling code here:
        calcularPromedio(alumnosEnCurso, notasCurso);
        llenarTablaActividades(nombreCurso);

for (Vector<String> elemento : notasCurso) {
            for (String valor : elemento) {
                System.out.print(valor + " "); // Mostrar cada valor separado por un espacio
            }
            System.out.println(); // Nueva línea para separar cada elemento del vector
        } 
         for (Vector<String> elemento : alumnosEnCurso) {
            for (String valor : elemento) {
                System.out.print(valor + " "); // Mostrar cada valor separado por un espacio
            }
            System.out.println(); // Nueva línea para separar cada elemento del vector
        } 
      
    }//GEN-LAST:event_actualizarTablaActividadesBotonActionPerformed
private void cargarDatosDesdeCSVNotas2(File archivoCSV) {
    DefaultTableModel modelo = (DefaultTableModel) TablaActidades.getModel();
    modelo.setRowCount(0); // Limpiamos todas las filas existentes en la tabla

    try (BufferedReader br = new BufferedReader(new FileReader(archivoCSV))) {
        String line;
        int numeroDeCarga = 1; // Variable para llevar la cuenta del número de carga

        while ((line = br.readLine()) != null) {
            String[] datos = line.split(",");
            if (datos.length == 5) {
                modelo.addRow(datos); // Agregamos una fila al modelo de tabla
                String nombreCurso = "nombreCurso"; // Reemplaza con el nombre del curso adecuado
                String descripcionCurso = "descripcionCurso"; // Reemplaza con la descripción del curso adecuada
                CursoPlantillaModuloProfe plantilla = new CursoPlantillaModuloProfe();
                llenarPlantilla( nombreCurso,  descripcionCurso);
                numeroDeCarga++; // Incrementar el número de carga para la próxima fila
            }
        }
        JOptionPane.showMessageDialog(this, "Datos cargados exitosamente.");
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error al leer el archivo CSV.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

 public String AbrirCargaNotas(File CargaNotas){
       String documento3 = "";
    try {
        BufferedReader br = new BufferedReader(new FileReader(CargaNotas));
        String linea;
        
        while ((linea = br.readLine()) != null) {
            String[] campos = linea.split(",");
            
            // Convierte los campos en un vector de cadenas
            Vector<String> fila = new Vector<>();
            for (String campo : campos) {
                fila.add(campo);
            }
            
            // Agrega la fila al vectorDeDatos
            notasCurso.add(fila);
        }

        br.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return documento3;
        }


    private void CargacsvNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargacsvNotasActionPerformed
        // TODO add your handling code here:

        if(seleccionarNotas.showDialog(null,"Abrir")==JFileChooser.APPROVE_OPTION){
           CargaNotas=seleccionarNotas.getSelectedFile();
           if(CargaNotas.canRead()){
               if(CargaNotas.getName().endsWith("csv")){
                   String documento43 = AbrirCargaNotas(CargaNotas);
                    cargarDatosDesdeCSVNotas2(CargaNotas); // Llamamos a un método para cargar los datos

               } else{
                JOptionPane.showMessageDialog(null, "Archivo no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
               }
           }
        }
       
        
    }//GEN-LAST:event_CargacsvNotasActionPerformed
public static Vector<Vector<String>> ordenamientoDeNotasMejores; // Vector para ordenar las mejores notas
public static Vector<Vector<String>> ordenamientoDeNotasPeores;
    private void Top5MejoresEstudiantesbotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Top5MejoresEstudiantesbotonActionPerformed
        // TODO add your handling code here:
        compararYGuardarMejoresNotas();
        ordenarMejoresNotas();
        exportarMejoresAlumnosHTML();  
    }//GEN-LAST:event_Top5MejoresEstudiantesbotonActionPerformed

    private void Top5PeoresEstudiantesbotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Top5PeoresEstudiantesbotonActionPerformed
        // TODO add your handling code here:
        compararYGuardarPeoresNotas();
        ordenarPeoresNotas();
        exportarPeoresAlumnosHTML(nombreCurso);
    }//GEN-LAST:event_Top5PeoresEstudiantesbotonActionPerformed
private void compararYGuardarPeoresNotas() {
    ordenamientoDeNotasPeores = new Vector<>();

    for (Vector<String> alumno : vectorAlumnosAsignadosAsignados) {
        // Verificar si el alumno tiene al menos cuatro elementos
        if (alumno.size() < 4) {
            continue; // Si no tiene al menos cuatro elementos, pasar al siguiente alumno
        }

        String codigoAlumno = alumno.get(0);
        String nombreCursoAlumno = alumno.get(4);

        // Verificar si el nombre del curso coincide con nombreCurso
        if (!nombreCursoAlumno.equals(nombreCurso)) {
            continue; // Si no coincide, pasar al siguiente alumno
        }

        double notaPonderada = 0.0; // Inicializar la nota ponderada en 0.0

        for (Vector<String> nota : notasCurso) {
            String codigoCurso = nota.get(0);

            if (codigoAlumno.equals(codigoCurso)) {
                // Obtener la nota y ponderarla
                double notaCurso = Double.parseDouble(nota.get(1));
                notaPonderada = ponderacion * (notaCurso / 100.0);
                break; // Solo necesitamos una nota por alumno, así que salimos del bucle interno.
            }
        }

        // Guardar la nota ponderada en ordenamientoDeNotasPeores
        Vector<String> fila = new Vector<>();
        fila.add(codigoAlumno);
        fila.add(String.valueOf(notaPonderada)); // Convertir la nota ponderada a cadena
        fila.add(nombreCursoAlumno); // Agregar el nombre del curso actual
        ordenamientoDeNotasPeores.add(fila);
    }
}

private void ordenarPeoresNotas() {
    ordenamientoDeNotasPeores.sort((fila1, fila2) -> {
        double nota1 = Double.parseDouble(fila1.get(1));
        double nota2 = Double.parseDouble(fila2.get(1));
        return Double.compare(nota1, nota2); // Ordenar de menor a mayor
    });
}

private void exportarPeoresAlumnosHTML(String nombreCurso) {
    String nombreArchivo = "top5Peores_" + nombreCurso + ".html";
    
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo))) {
        writer.write("<html><head><title>Top 5 Alumnos con Menor Rendimiento en " + nombreCurso + "</title></head><body>");
        writer.write("<h1>Top 5 Alumnos con Menor Rendimiento en " + nombreCurso + "</h1>");
        writer.write("<table border=\"1\"><tr><th>Código de Alumno</th><th>Nota</th></tr>");

        for (int i = 0; i < Math.min(5, ordenamientoDeNotasPeores.size()); i++) {
            Vector<String> fila = ordenamientoDeNotasPeores.get(i);
            String codigoAlumno = fila.get(0);
            String notaCurso = fila.get(1);
            String cursoAlumno = fila.get(2); // Obtener el nombre del curso de la fila

            // Verificar si el nombre del curso coincide con el curso actual
            if (!cursoAlumno.equals(nombreCurso)) {
                continue; // Si no coincide, pasar al siguiente
            }

            writer.write("<tr><td>" + codigoAlumno + "</td><td>" + notaCurso + "</td></tr>");
        }

        writer.write("</table></body></html>");
        System.out.println("Archivo HTML exportado exitosamente: " + nombreArchivo);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
    
private void compararYGuardarMejoresNotas() {
    ordenamientoDeNotasMejores = new Vector<>();
    Set<String> codigosProcesados = new HashSet<>();
    Map<String, Double> codigoANotaPonderada = new HashMap<>();
    String nombreCursoProcesado = null; // Nombre del curso actual

    for (Vector<String> alumno : vectorAlumnosAsignadosAsignados) {
        // Verificar si el alumno tiene al menos tres elementos
        if (alumno.size() < 4) {
            continue; // Si no tiene al menos dos elementos, pasar al siguiente alumno
        }

        String codigoAlumno = alumno.get(0);
        String nombreCursoAlumno = alumno.get(4);

        // Verificar si el nombre del curso coincide con nombreCurso
        if (!nombreCursoAlumno.equals(nombreCurso)) {
            continue; // Si no coincide, pasar al siguiente alumno
        }

        // Si cambiamos de curso, almacenar el nombre del nuevo curso
        if (!nombreCursoAlumno.equals(nombreCursoProcesado)) {
            nombreCursoProcesado = nombreCursoAlumno;
        }

        // Verificar si el código de alumno ya ha sido procesado
        if (codigosProcesados.contains(codigoAlumno)) {
            continue; // Si ya se procesó, pasar al siguiente alumno
        }

        double notaPonderada = 0.0; // Inicializar la nota ponderada en 0.0

        for (Vector<String> nota : notasCurso) {
            String codigoCurso = nota.get(0);

            if (codigoAlumno.equals(codigoCurso)) {
                // Obtener la nota y ponderarla
                double notaCurso = Double.parseDouble(nota.get(1));
                notaPonderada = ponderacion * (notaCurso / 100.0);
                break; // Solo necesitamos una nota por alumno, así que salimos del bucle interno.
            }
        }

        // Guardar la nota ponderada en ordenamientoDeNotasMejores solo si el código de alumno no se ha procesado previamente
        if (!codigosProcesados.contains(codigoAlumno)) {
            Vector<String> fila = new Vector<>();
            fila.add(codigoAlumno);
            fila.add(String.valueOf(notaPonderada)); // Convertir la nota ponderada a cadena
            fila.add(nombreCursoProcesado); // Agregar el nombre del curso actual
            ordenamientoDeNotasMejores.add(fila);

            // Agregar el código de alumno al conjunto de códigos procesados
            codigosProcesados.add(codigoAlumno);

            // Guardar la nota ponderada en el mapa (sobrescribir si ya existe)
            codigoANotaPonderada.put(codigoAlumno, notaPonderada);
        }
    }

    // Agregar impresión de depuración para verificar el contenido de ordenamientoDeNotasMejores
    System.out.println("Contenido de ordenamientoDeNotasMejores:");
    for (Vector<String> fila : ordenamientoDeNotasMejores) {
        System.out.println(fila);
    }
}
private void ordenarMejoresNotas() {
    ordenamientoDeNotasMejores.sort((fila1, fila2) -> {
        double nota1 = Double.parseDouble(fila1.get(1));
        double nota2 = Double.parseDouble(fila2.get(1));
        return Double.compare(nota2, nota1); // Ordenar de mayor a menor
    });
}

private void exportarMejoresAlumnosHTML() {
    String nombreArchivo = "top5Mejores_" + nombreCurso + ".html";
    
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo))) {
        writer.write("<html><head><title>Top 5 Alumnos con Mayor Rendimiento en " + nombreCurso + "</title></head><body>");
        writer.write("<h1>Top 5 Alumnos con Mayor Rendimiento en " + nombreCurso + "</h1>");
        writer.write("<table border=\"1\"><tr><th>Código de Alumno</th><th>Nota</th></tr>");

        Set<String> codigosAgregados = new HashSet<>(); // Para evitar duplicados

        for (Vector<String> fila : ordenamientoDeNotasMejores) {
            String codigoAlumno = fila.get(0);
            String notaCurso = fila.get(1);
            String cursoAlumno = fila.get(2); // Obtener el nombre del curso de la fila

            // Verificar si el código de alumno ya ha sido agregado
            if (codigosAgregados.contains(codigoAlumno)) {
                continue; // Si ya se agregó, pasar al siguiente
            }

            // Verificar si el nombre del curso coincide con el curso actual
            if (!cursoAlumno.equals(nombreCurso)) {
                continue; // Si no coincide, pasar al siguiente
            }

            writer.write("<tr><td>" + codigoAlumno + "</td><td>" + notaCurso + "</td></tr>");
            codigosAgregados.add(codigoAlumno);
        }

        writer.write("</table></body></html>");
        System.out.println("Archivo HTML exportado exitosamente: " + nombreArchivo);
    } catch (IOException e) {
        e.printStackTrace();
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CursoPlantillaModuloProfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CursoPlantillaModuloProfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CursoPlantillaModuloProfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CursoPlantillaModuloProfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CursoPlantillaModuloProfe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AcumuladoLabel;
    private javax.swing.JButton CargaMasivaAlumnosAsignados;
    private javax.swing.JButton CargacsvNotas;
    private javax.swing.JButton CrearActividadBoton;
    private javax.swing.JTextField DescripcionActividadtxtField;
    private javax.swing.JLabel LabelNombreCurso;
    private javax.swing.JTextField NombreActividadtxtField;
    private javax.swing.JTextField PonderacionActividadtxtField;
    private javax.swing.JTable TablaActidades;
    private javax.swing.JTable TablaListadoAlumnos;
    private javax.swing.JButton Top5MejoresEstudiantesboton;
    private javax.swing.JButton Top5PeoresEstudiantesboton;
    private javax.swing.JButton actualizarTablaActividadesBoton;
    private javax.swing.JButton actualizarTablaBoton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton regresarboton;
    // End of variables declaration//GEN-END:variables
}
